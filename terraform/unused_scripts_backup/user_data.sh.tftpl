#!/bin/bash
set -e
set -x # Log commands

LOG_FILE="/var/log/bastion_userdata.log"
echo "User data script started at $(date)" | tee -a $LOG_FILE

# Redirect all output to log file
exec > >(tee -a $LOG_FILE) 2>&1

# Variables passed from Terraform
GITHUB_RAW_URL="${github_repo_url}"
CENTRAL_KEYS_FILE="/etc/ssh/authorized_keys"

# --- Task 5: Install Required Packages --- 
echo "--- Starting Task 5: Installing Packages ---"
sudo apt-get update -y
# Install packages needed for key management, auditing, and utilities
sudo apt-get install -y curl git jq auditd audispd-plugins acl logrotate apt-transport-https ca-certificates gnupg software-properties-common
# Note: 'script' command is usually part of 'bsdutils' or 'util-linux', typically pre-installed.
# Note: iptables-persistent was removed as per user request.

# --- Task 6, 7, 9: Create Key Update Script, Make Executable, Create Log File ---
echo "--- Starting Tasks 6, 7, 9: Key Update Script Setup ---"

# Task 9: Create log file first
echo "Creating log file /var/log/ssh_key_updates.log"
sudo touch /var/log/ssh_key_updates.log
sudo chmod 644 /var/log/ssh_key_updates.log
sudo chown root:root /var/log/ssh_key_updates.log # Ensure ownership

# Task 6: Create the key update script using heredoc
echo "Creating /usr/local/bin/update_ssh_keys.sh"
sudo cat << 'EOF' > /usr/local/bin/update_ssh_keys.sh
#!/bin/bash
set -e

# Configuration
# Using a placeholder that will be replaced by sed later
GITHUB_REPO_URL_VAR="##GITHUB_REPO_URL_PLACEHOLDER##"
KEYS_FILE_NAME="authorized_keys"
LOCAL_FILE="/etc/ssh/authorized_keys"
LOG_FILE="/var/log/ssh_key_updates.log"

# Log function
log() {
  echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | sudo tee -a $LOG_FILE
}

log "Starting SSH key update"

# Fetch the authorized_keys file from GitHub
log "Fetching keys from $GITHUB_REPO_URL_VAR"
# Use curl with fail-early, silent, and location-follow options
if ! curl -s -f -L -o /tmp/$KEYS_FILE_NAME $GITHUB_REPO_URL_VAR; then
  log "ERROR: Failed to download authorized_keys from $GITHUB_REPO_URL_VAR (curl exit code: $?)"
  # Exit if download fails to prevent wiping keys on transient network issues
  exit 1
fi

# Verify it's not empty and looks like SSH keys
# Improved grep pattern for various key types
if [ ! -s "/tmp/$KEYS_FILE_NAME" ] || ! grep -qE '^(ssh-(rsa|dss|ed25519|ecdsa)|ecdsa-sha2-nistp(256|384|521)) ' "/tmp/$KEYS_FILE_NAME"; then
  log "ERROR: Downloaded file /tmp/$KEYS_FILE_NAME is empty or doesn't contain valid SSH key formats. Aborting update."
  rm -f /tmp/$KEYS_FILE_NAME
  exit 1
fi

# Make immutable flag removable if set before comparison/copy
IMMUTABLE_SET=false
if command -v chattr &>/dev/null && [ -f "$LOCAL_FILE" ]; then
    if lsattr "$LOCAL_FILE" 2>/dev/null | grep -q -- '-i-'; then
        log "Making $LOCAL_FILE mutable before update."
        sudo chattr -i "$LOCAL_FILE"
        IMMUTABLE_SET=true # Remember that we need to re-apply it
    fi
fi

# Compare with current file to see if update is needed
if [ -f "$LOCAL_FILE" ] && cmp -s "/tmp/$KEYS_FILE_NAME" "$LOCAL_FILE"; then
  log "No changes detected in authorized_keys"
  # Re-apply immutable flag if it was removed
  if [ "$IMMUTABLE_SET" = true ] && command -v chattr &>/dev/null; then
     sudo chattr +i "$LOCAL_FILE" 2>/dev/null || true
     log "Re-applied immutable flag to $LOCAL_FILE."
  fi
  rm -f /tmp/$KEYS_FILE_NAME
  exit 0
fi

log "Changes detected. Updating $LOCAL_FILE."

# Back up current file if it exists
if [ -f "$LOCAL_FILE" ]; then
  BACKUP_FILE="$LOCAL_FILE.$(date +%Y%m%d%H%M%S).bak"
  log "Backing up current keys to $BACKUP_FILE"
  sudo cp "$LOCAL_FILE" "$BACKUP_FILE"
fi

# Update the authorized_keys file
sudo cp "/tmp/$KEYS_FILE_NAME" "$LOCAL_FILE"
sudo chown root:root "$LOCAL_FILE"
sudo chmod 644 "$LOCAL_FILE"

# Make immutable to prevent local changes
if command -v chattr &>/dev/null; then
  log "Making $LOCAL_FILE immutable."
  sudo chattr +i "$LOCAL_FILE" 2>/dev/null || true # Use sudo here too
fi

log "SSH keys updated successfully"

# Restart SSH service if keys changed
log "Restarting SSH service (sshd)"
sudo systemctl restart sshd
log "SSH service restart command issued."

# Clean up
rm -f /tmp/$KEYS_FILE_NAME

exit 0
EOF

# Replace the placeholder with the actual URL from Terraform variable
# Using '#' as delimiter for sed to avoid issues with '/' in the URL
sudo sed -i "s#^GITHUB_REPO_URL_VAR=.*#GITHUB_REPO_URL_VAR=\"$GITHUB_RAW_URL\"#" /usr/local/bin/update_ssh_keys.sh

# Task 7: Make script executable
echo "Making /usr/local/bin/update_ssh_keys.sh executable"
sudo chmod +x /usr/local/bin/update_ssh_keys.sh

# --- Task 8: Create Cron Job for Key Updates ---
echo "--- Starting Task 8: Creating Cron Job ---"
echo "Creating cron job /etc/cron.d/update_ssh_keys"
echo "*/5 * * * * root /usr/local/bin/update_ssh_keys.sh" | sudo tee /etc/cron.d/update_ssh_keys
sudo chmod 0644 /etc/cron.d/update_ssh_keys # Ensure correct permissions

# --- Task 10 & 14: Configure SSHd --- 
echo "--- Starting Tasks 10 & 14: Configuring SSHd ---"
SSHD_CONFIG="/etc/ssh/sshd_config"

echo "Configuring $SSHD_CONFIG"

# Use sed to modify sshd_config, commenting out old lines if they exist and adding/uncommenting new ones
# Task 10: Centralized keys file
sudo sed -i -e 's/^\(#\s*\)*AuthorizedKeysFile.*/# & # Modified by user_data/' "$SSHD_CONFIG"
sudo bash -c "echo 'AuthorizedKeysFile $CENTRAL_KEYS_FILE' >> $SSHD_CONFIG"

# Task 10: Disable PasswordAuthentication
sudo sed -i -e 's/^\(#\s*\)*PasswordAuthentication.*/# & # Modified by user_data/' "$SSHD_CONFIG"
sudo bash -c "echo 'PasswordAuthentication no' >> $SSHD_CONFIG"

# Task 10: Disable ChallengeResponseAuthentication
sudo sed -i -e 's/^\(#\s*\)*ChallengeResponseAuthentication.*/# & # Modified by user_data/' "$SSHD_CONFIG"
sudo bash -c "echo 'ChallengeResponseAuthentication no' >> $SSHD_CONFIG"

# Task 10: Enable TCP Forwarding (Adjust if not needed)
sudo sed -i -e 's/^\(#\s*\)*AllowTcpForwarding.*/# & # Modified by user_data/' "$SSHD_CONFIG"
sudo bash -c "echo 'AllowTcpForwarding yes' >> $SSHD_CONFIG"

# Task 14: Syslog Facility
sudo sed -i -e 's/^\(#\s*\)*SyslogFacility.*/# & # Modified by user_data/' "$SSHD_CONFIG"
sudo bash -c "echo 'SyslogFacility AUTH' >> $SSHD_CONFIG"

# Task 14: Log Level
sudo sed -i -e 's/^\(#\s*\)*LogLevel.*/# & # Modified by user_data/' "$SSHD_CONFIG"
sudo bash -c "echo 'LogLevel VERBOSE' >> $SSHD_CONFIG"

# Validate SSH config
echo "Validating SSHD configuration..."
sudo sshd -t
if [ $? -ne 0 ]; then
  echo "ERROR: sshd configuration validation failed! Check $SSHD_CONFIG and logs." >&2
  # Depending on policy, you might want to exit 1 here or attempt recovery
fi

# Restart SSHD to apply configuration changes (separate from key update restart)
echo "Restarting SSHd service to apply configuration changes."
sudo systemctl restart sshd

# --- SSH Key Identifier Setup ---
echo "--- Setting up SSH Key Identifier System ---"

# The SSH key identifier script is created in the wrapper script
# Just make sure it's executable and run it
chmod +x /usr/local/bin/ssh_key_identifier.sh
/usr/local/bin/ssh_key_identifier.sh

# --- Task 11, 12, 13: Command Auditing Setup ---
echo "--- Starting Tasks 11, 12, 13: Command Auditing Setup ---"

# Task 11: Create directory for session logs
echo "Creating /var/log/user-sessions directory"
sudo mkdir -p /var/log/user-sessions
# Set permissions to allow ubuntu user to write to the directory
sudo chmod 1755 /var/log/user-sessions # Sticky bit with execute for all
sudo chown root:root /var/log/user-sessions
# Add ubuntu user to the adm group which typically has log access
sudo usermod -a -G adm ubuntu
# Set group ownership to adm and add group write permissions
sudo chgrp adm /var/log/user-sessions
sudo chmod g+w /var/log/user-sessions

# Task 12: Create command logging script
echo "Creating /etc/profile.d/command-audit.sh"
sudo cat << 'EOF' > /etc/profile.d/command-audit.sh
#!/bin/bash

# Prevent duplicate session logging if script is sourced multiple times
if [ -n "$SCRIPT_STARTED" ]; then
    return
fi

# Log only interactive sessions, not scripts or cron jobs
if [ -z "$PS1" ]; then
    return
fi

# Avoid logging for root user if desired (adjust logic as needed)
if [ "$(whoami)" = "root" ]; then
    # Consider if root actions should also be logged via script
    return
fi

# Define log file path
SESSION_LOG_DIR="/var/log/user-sessions"
LOG_FILE="$SESSION_LOG_DIR/$(whoami)-session-$(date +%Y%m%d_%H%M%S)-$.log"

# Ensure the directory exists and has correct permissions
# Note: Directory creation is handled earlier in user_data

# Start the 'script' command to capture TTY output
# -a: append to log file
# -q: quiet mode
# -f: flush output after each write
# -t=0: do not create timing file (or specify path like /tmp/timing.$.log)
export SCRIPT_STARTED=1 # Mark that script has started
script -a -q -f "$LOG_FILE"

# Exit the parent shell process that sourced this script
# This is crucial so the user's shell doesn't terminate immediately
# Instead, 'script' command takes over the TTY
# The user's shell continues *inside* the 'script' session

# Note: 'exit' here would terminate the user's login shell.
# The 'script' command effectively replaces the shell process
# for the duration of the session. When the user exits their
# shell (e.g., types 'exit' or closes terminal), 'script' finishes.

EOF

# Task 13: Make command logging script executable
echo "Making /etc/profile.d/command-audit.sh executable"
sudo chmod +x /etc/profile.d/command-audit.sh

# --- Task 15: Setup Log Rotation for Session Logs ---
echo "--- Starting Task 15: Log Rotation Setup ---"
echo "Creating /etc/logrotate.d/user-sessions"
sudo cat << 'EOF' > /etc/logrotate.d/user-sessions
/var/log/user-sessions/*.log {
  rotate 30
  daily
  compress
  delaycompress
  missingok
  notifempty
  create 0640 root root
}
EOF
sudo chmod 0644 /etc/logrotate.d/user-sessions

# --- SSH Key Identifier Setup ---
echo "--- Setting up SSH Key Identifier System ---"

# Create directory for key mapping
sudo mkdir -p /etc/ssh/key_mapping
sudo chmod 755 /etc/ssh/key_mapping

# Function to extract identifiers from authorized_keys
extract_key_identifiers() {
  local auth_keys_file="/etc/ssh/authorized_keys"
  local mapping_file="/etc/ssh/key_mapping/fingerprint_to_user.txt"
  
  # Clear existing mapping
  sudo rm -f "$mapping_file"
  sudo touch "$mapping_file"
  sudo chmod 644 "$mapping_file"
  
  # Process each line in authorized_keys
  while IFS= read -r line; do
    # Skip empty lines and comments
    if [[ -z "$line" || "$line" == \#* ]]; then
      continue
    fi
    
    # Write the entire line to a temporary file
    echo "$line" | sudo tee /tmp/temp_key.pub > /dev/null
    
    # Get the fingerprint, suppressing errors
    fingerprint=$(ssh-keygen -lf /tmp/temp_key.pub 2>/dev/null | awk '{print $2}')
    if [ -z "$fingerprint" ]; then
      fingerprint="FINGERPRINT_UNAVAILABLE"
      echo "Warning: Could not extract fingerprint for key, using fallback identifier"
    fi
    
    # Extract the comment/email (usually at the end of the line)
    identifier=$(echo "$line" | awk '{print $NF}')
    
    # If identifier looks like a valid email or username
    if [[ "$identifier" == *@* || "$identifier" =~ ^[a-zA-Z0-9._-]+$ ]]; then
      echo "$fingerprint $identifier" | sudo tee -a "$mapping_file" > /dev/null
      echo "Mapped fingerprint $fingerprint to user $identifier"
    else
      echo "No valid identifier found for key with fingerprint $fingerprint"
    fi
  done < "$auth_keys_file"
  
  # Clean up
  sudo rm -f /tmp/temp_key.pub
}

# Create SSH login hook for user identification
cat > /etc/ssh/sshrc << 'EOF'
#!/bin/bash

# Function to get key fingerprint - this is complex and may not always work
get_key_fingerprint() {
  # Try multiple methods to get the fingerprint
  
  # Method 1: Using ssh-keyscan (most reliable for OpenSSH)
  local fp=$(ssh-keygen -lf <(ssh-keyscan -t rsa,dsa,ecdsa,ed25519 localhost 2>/dev/null) | awk '{print $2}' 2>/dev/null)
  
  if [ -n "$fp" ]; then
    echo "$fp"
    return 0
  fi
  
  # Method 2: Try to extract from auth log if recent
  local auth_log_fp=$(grep -a "$(whoami)" /var/log/auth.log | grep -a "Accepted publickey" | tail -1 | grep -o "SHA256:[a-zA-Z0-9+/]\+" | head -1)
  
  if [ -n "$auth_log_fp" ]; then
    echo "$auth_log_fp"
    return 0
  fi
  
  # If all methods fail
  echo "FINGERPRINT_UNAVAILABLE"
  return 1
}

# Get the key fingerprint used for this connection
KEY_FP=$(get_key_fingerprint)

# Function to identify user from fingerprint
identify_user() {
  local fingerprint="$1"
  local mapping_file="/etc/ssh/key_mapping/fingerprint_to_user.txt"
  
  if [ -f "$mapping_file" ]; then
    # Try exact match first
    local user_id=$(grep "$fingerprint" "$mapping_file" | awk '{print $2}')
    
    if [ -n "$user_id" ]; then
      echo "$user_id"
      return 0
    fi
    
    # If fingerprint is unavailable, try to match by SSH_CLIENT IP if we have recent logins
    if [ "$fingerprint" = "FINGERPRINT_UNAVAILABLE" ] && [ -n "$SSH_CLIENT" ]; then
      local client_ip=$(echo "$SSH_CLIENT" | awk '{print $1}')
      local recent_user=$(grep "$client_ip" /var/log/auth.log | grep "SSH LOGIN: User" | tail -1 | grep -o "User [^ ]\+" | awk '{print $2}')
      
      if [ -n "$recent_user" ]; then
        echo "$recent_user"
        return 0
      fi
    fi
  fi
  
  # Default username if we can't identify the user
  echo "$(whoami)@unknown"
  return 1
}

# Look up the user identifier
USER_ID=$(identify_user "$KEY_FP")

# Get the session ID
SESSION_ID=$(echo $$)

# Ensure session mappings directory exists
mkdir -p /etc/ssh/session_mappings

# Create a mapping between session ID and user identifier
echo "$SESSION_ID $USER_ID" >> /etc/ssh/session_mappings/mappings.txt

# Log the identified user
logger -p auth.info "SSH LOGIN: User $USER_ID (fingerprint: $KEY_FP) logged in with session ID $SESSION_ID from $SSH_CLIENT"

# Set a custom PS1 prompt with the user identifier
echo "export PS1='[$USER_ID] \u@\h:\w\$ '" >> ~/.bashrc

# Display welcome message
echo "Welcome $USER_ID. Your actions are being logged."
EOF

chmod +x /etc/ssh/sshrc

# Create directory for session mappings
mkdir -p /etc/ssh/session_mappings
chmod 755 /etc/ssh/session_mappings

# Create a script to update key mappings when keys are updated
cat > /usr/local/bin/update_key_mappings.sh << 'EOF'
#!/bin/bash
# This script is called after the authorized_keys file is updated

# Extract identifiers from the updated keys
extract_key_identifiers

# Log the update
logger -p auth.info "SSH key mappings updated"
EOF

chmod +x /usr/local/bin/update_key_mappings.sh

# Add a call to this script in the update_ssh_keys.sh file
if [ -f "/usr/local/bin/update_ssh_keys.sh" ]; then
  # Check if the hook is already added
  if ! grep -q "update_key_mappings.sh" "/usr/local/bin/update_ssh_keys.sh"; then
    # Add the call before the exit
    sudo sed -i '/exit 0/i # Update key mappings\n/usr/local/bin/update_key_mappings.sh' /usr/local/bin/update_ssh_keys.sh
  fi
fi

# Create a tool to search audit logs by user
cat > /usr/local/bin/audit-search-by-user.sh << 'EOF'
#!/bin/bash
# Script to search audit logs by user identifier

if [ $# -lt 1 ]; then
  echo "Usage: $0 <user_identifier> [date_spec]"
  echo "Example: $0 john.doe@example.com today"
  echo "Example with date: $0 john.doe@example.com '05/13/2025 08:00:00'"
  exit 1
fi

USER_ID="$1"
DATE_SPEC="$${2:-today}"

# Function to find sessions for a user
find_sessions() {
  local user="$1"
  local sessions=""
  
  # Method 1: Check the session mappings file
  if [ -f "/etc/ssh/session_mappings/mappings.txt" ]; then
    local mapped_sessions=$(grep -F "$user" /etc/ssh/session_mappings/mappings.txt | awk '{print $1}')
    if [ -n "$mapped_sessions" ]; then
      sessions="$mapped_sessions"
      echo "Found sessions in mapping file: $sessions"
    fi
  fi
  
  # Method 2: Check auth.log
  if [ -z "$sessions" ]; then
    # Look for exact matches first
    local auth_sessions=$(grep -F "SSH LOGIN: User $user" /var/log/auth.log | grep -o "session ID [0-9]\+" | awk '{print $3}')
    if [ -n "$auth_sessions" ]; then
      sessions="$auth_sessions"
      echo "Found sessions in auth.log: $sessions"
    fi
  fi
  
  # Method 3: Try partial matches if still no sessions found
  if [ -z "$sessions" ]; then
    local partial_sessions=$(grep "SSH LOGIN: User" /var/log/auth.log | grep -i "$user" | grep -o "session ID [0-9]\+" | awk '{print $3}')
    if [ -n "$partial_sessions" ]; then
      sessions="$partial_sessions"
      echo "Found sessions with partial match: $sessions"
    fi
  fi
  
  echo "$sessions"
}

# Find SSH sessions for this user
echo "=== SSH Sessions for $USER_ID ==="
grep -F "SSH LOGIN: User $USER_ID" /var/log/auth.log || echo "No exact matches found in auth.log"

# Get session IDs
SESSION_IDS=$(find_sessions "$USER_ID")

if [ -z "$SESSION_IDS" ]; then
  echo "No session IDs found for $USER_ID"
  echo "Checking for similar usernames..."
  
  # Try to find similar usernames
  SIMILAR_USERS=$(grep "SSH LOGIN: User" /var/log/auth.log | grep -o "User [^ ]\+" | sort | uniq | grep -i "${USER_ID%%@*}")
  
  if [ -n "$SIMILAR_USERS" ]; then
    echo "Found similar users:"
    echo "$SIMILAR_USERS"
    echo "Try searching with one of these usernames instead."
  else
    echo "No similar users found."
  fi
  
  exit 0
fi

# Search audit logs for each session
for SES_ID in $SESSION_IDS; do
  echo ""
  echo "=== Commands for session $SES_ID (User: $USER_ID) ==="
  ausearch -ts "$DATE_SPEC" -k commands --session "$SES_ID" -i 2>/dev/null || echo "No audit records found for session $SES_ID"
done
EOF

chmod +x /usr/local/bin/audit-search-by-user.sh

# Set up audit rules for command logging
cat > /usr/local/bin/setup_audit_rules.sh << 'EOF'
#!/bin/bash

# Add audit rules for command execution
auditctl -a exit,always -F arch=b64 -S execve -k commands
auditctl -a exit,always -F arch=b32 -S execve -k commands

# Make rules persistent
if [ -d "/etc/audit/rules.d" ]; then
  echo "-a exit,always -F arch=b64 -S execve -k commands" | sudo tee /etc/audit/rules.d/command-logging.rules
  echo "-a exit,always -F arch=b32 -S execve -k commands" | sudo tee -a /etc/audit/rules.d/command-logging.rules
fi
EOF

chmod +x /usr/local/bin/setup_audit_rules.sh
/usr/local/bin/setup_audit_rules.sh

# Extract identifiers from current authorized_keys file
extract_key_identifiers

# --- Task 16: Configure PAM for Session Logging ---
echo "--- Starting Task 16: PAM Configuration ---"
PAM_SSHD_CONFIG="/etc/pam.d/sshd"
echo "Configuring $PAM_SSHD_CONFIG for session logging"
# Check if the line already exists to avoid duplicates
if ! sudo grep -q "session    required     pam_lastlog.so showfailed" "$PAM_SSHD_CONFIG"; then
    echo "Appending pam_lastlog.so to $PAM_SSHD_CONFIG"
    echo "session    required     pam_lastlog.so showfailed" | sudo tee -a "$PAM_SSHD_CONFIG"
else
    echo "pam_lastlog.so already configured in $PAM_SSHD_CONFIG"
fi

# --- Task 20: Configure File Integrity Monitoring (auditd) ---
echo "--- Starting Task 20: Auditd Configuration ---"
AUDIT_RULES_FILE="/etc/audit/rules.d/99-bastion.rules" # Use a custom file to avoid conflicts
echo "Configuring auditd rules in $AUDIT_RULES_FILE"

sudo bash -c "cat > $AUDIT_RULES_FILE" << 'EOF'
## Custom Bastion Audit Rules

# Monitor SSH configuration changes
-w /etc/ssh/sshd_config -p wa -k sshd_config_changes
-w /etc/ssh/authorized_keys -p wa -k ssh_keys_changes

# Monitor sudoers changes
-w /etc/sudoers -p wa -k sudoers_changes
-w /etc/sudoers.d/ -p wa -k sudoers_d_changes

# Monitor user/group modifications
-w /etc/passwd -p wa -k user_group_changes
-w /etc/shadow -p wa -k user_group_changes
-w /etc/group -p wa -k user_group_changes
-w /etc/gshadow -p wa -k user_group_changes # Include gshadow

# Monitor login/logout events (log tampering)
-w /var/log/wtmp -p wa -k session_log_tampering
-w /var/log/btmp -p wa -k session_log_tampering
-w /var/run/utmp -p wa -k session_log_tampering

# Monitor audit configuration changes
-w /etc/audit/auditd.conf -p wa -k audit_config_changes
-w /etc/audit/rules.d/ -p wa -k audit_rules_changes

# Monitor critical binaries (example: add more as needed)
-w /usr/sbin/sshd -p x -k critical_binary_execution
-w /usr/bin/sudo -p x -k critical_binary_execution

# Make the configuration immutable (highly recommended)
#-e 2
EOF

# Optionally enable '-e 2' (make config immutable) by uncommenting the line above
# Or by running: sudo sed -i 's/^-e 2/#-e 2/' $AUDIT_RULES_FILE ; echo '-e 2' | sudo tee -a $AUDIT_RULES_FILE

echo "Restarting auditd service..."
sudo systemctl restart auditd

# --- Task 21: Configure Syslog for Security Alerts ---
echo "--- Starting Task 21: Syslog Alerting Configuration ---"
RSYSLOG_CONF="/etc/rsyslog.d/90-security-alerts.conf"
ALERT_LOG="/var/log/security-alerts.log"

echo "Creating $RSYSLOG_CONF"
sudo cat << 'EOF' > $RSYSLOG_CONF
# Send specific security-related messages to a dedicated log file
:programname, isequal, "sudo" $ALERT_LOG
& stop
:programname, isequal, "sshd" $ALERT_LOG
& stop

# Auditd logs often go to /var/log/audit/audit.log by default, but filter by tag if needed
# Example using logger tag from command-audit.sh
if $syslogtag contains 'USER:' and not ($msg contains 'timing') then $ALERT_LOG
& stop

# You might want to filter specific audit messages via audispd plugins or specific syslog rules
# Check /etc/audisp/plugins.d/syslog.conf and auditd config
# if $programname == 'auditd' then /var/log/audit/audit.log # Default

EOF

echo "Creating alert log file $ALERT_LOG"
sudo touch $ALERT_LOG
sudo chmod 640 $ALERT_LOG
sudo chown syslog:adm $ALERT_LOG # Common ownership for log files

echo "Restarting rsyslog service..."
sudo systemctl restart rsyslog

# --- Task 22: Create User Management Script ---
echo "--- Starting Task 22: User Management Script ---"
echo "Creating /usr/local/bin/add-bastion-user.sh"
sudo cat << 'EOF' > /usr/local/bin/add-bastion-user.sh
#!/bin/bash

# Check if script is run as root
if [ "$(id -u)" -ne 0 ]; then
  echo "This script must be run as root" >&2
  exit 1
fi

# Check if username is provided
if [ $# -lt 1 ]; then
  echo "Usage: $0 <username>" >&2
  exit 1
fi

USERNAME=$1

# Check if user already exists
if id "$USERNAME" &>/dev/null; then
    echo "User '$USERNAME' already exists." >&2
    exit 1
fi

# Create user with home directory and bash shell
echo "Creating user '$USERNAME'..."
useradd -m -s /bin/bash $USERNAME
if [ $? -ne 0 ]; then
    echo "ERROR: Failed to create user '$USERNAME'." >&2
    exit 1
fi

# Secure the .ssh directory immediately for the new user
USER_SSH_DIR="/home/$USERNAME/.ssh"
echo "Securing $USER_SSH_DIR..."
mkdir -p "$USER_SSH_DIR"
chown $USERNAME:$USERNAME "$USER_SSH_DIR"
chmod 700 "$USER_SSH_DIR"

if command -v chattr &>/dev/null; then
    chattr +i "$USER_SSH_DIR"
fi

echo "This directory is managed by the central SSH key system." > "$USER_SSH_DIR/README"
echo "Keys should be added through the GitHub repository." >> "$USER_SSH_DIR/README"
chown $USERNAME:$USERNAME "$USER_SSH_DIR/README"

echo "User '$USERNAME' created successfully."
echo "Their public key MUST be added to the GitHub repository via PR."
echo "Once merged, the key will be automatically deployed."

exit 0
EOF

echo "Making /usr/local/bin/add-bastion-user.sh executable"
sudo chmod +x /usr/local/bin/add-bastion-user.sh

# --- Task 23: Create SSH Directory Security Script ---
echo "--- Starting Task 23: SSH Directory Security Script ---"
echo "Creating /usr/local/bin/secure-ssh-dirs.sh"
sudo cat << 'EOF' > /usr/local/bin/secure-ssh-dirs.sh
#!/bin/bash
set -e # Exit on error

LOG_FILE="/var/log/secure_ssh_dirs.log"
log() {
  echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | sudo tee -a $LOG_FILE
}

log "Starting SSH directory security check..."

# Ensure chattr is available
if ! command -v chattr &>/dev/null; then
    log "ERROR: 'chattr' command not found. Cannot make directories immutable."
    exit 1 # Or choose to continue without immutability
fi

# Process existing user home directories
# Using getent for potentially better compatibility (e.g., LDAP users)
home_dirs=$(getent passwd | awk -F: '$6 ~ /\/home\// {print $6}' | sort -u)

for home_dir in $home_dirs; do
    if [ ! -d "$home_dir" ]; then
        log "Skipping non-existent home directory: $home_dir"
        continue
    fi

    user=$(basename $home_dir)
    ssh_dir="$home_dir/.ssh"

    log "Processing user: $user, directory: $ssh_dir"

    # Create .ssh directory if it doesn't exist
    if [ ! -d "$ssh_dir" ]; then
      log "Creating directory $ssh_dir"
      mkdir -p "$ssh_dir"
      chown $user:$user "$ssh_dir"
      chmod 700 "$ssh_dir"
    fi

    # Ensure correct ownership and permissions even if it exists
    current_owner=$(stat -c '%U:%G' $ssh_dir)
    current_perms=$(stat -c '%a' $ssh_dir)
    if [ "$current_owner" != "$user:$user" ]; then
        log "Correcting ownership for $ssh_dir (was $current_owner)"
        chown $user:$user "$ssh_dir"
    fi
    if [ "$current_perms" != "700" ]; then
        log "Correcting permissions for $ssh_dir (was $current_perms)"
        chmod 700 "$ssh_dir"
    fi

    # Check if immutable flag is already set
    if lsattr -d "$ssh_dir" 2>/dev/null | grep -q -- '-i-'; then
        log "Directory $ssh_dir is already immutable."
    else
        log "Making directory $ssh_dir immutable."
        chattr +i "$ssh_dir"
    fi

    # Create/update the warning file
    readme_file="$ssh_dir/README"
    echo "This directory is managed by the central SSH key system." > "$readme_file"
    echo "Keys should be added through the GitHub repository." >> "$readme_file"
    chown $user:$user "$readme_file"
    chmod 644 "$readme_file"

done

log "Finished SSH directory security check."
exit 0
EOF

echo "Making /usr/local/bin/secure-ssh-dirs.sh executable"
sudo chmod +x /usr/local/bin/secure-ssh-dirs.sh

# --- Task 24: Add SSH Directory Security Script to Startup ---
echo "--- Starting Task 24: Configure rc.local ---"
RC_LOCAL="/etc/rc.local"

# Create rc.local if it doesn't exist (common on newer systems)
if [ ! -f "$RC_LOCAL" ]; then
    echo "Creating $RC_LOCAL"
    sudo bash -c "cat > $RC_LOCAL" << EOF
#!/bin/sh -e
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

exit 0
EOF
    sudo chmod +x "$RC_LOCAL"
    # Enable the rc-local service if using systemd
    if command -v systemctl &> /dev/null; then
      sudo systemctl enable rc-local.service || echo "Warning: Could not enable rc-local.service (maybe not needed or present)"
      sudo systemctl start rc-local.service || echo "Warning: Could not start rc-local.service"
    fi
fi

# Add the secure-ssh-dirs script call before 'exit 0' if not already present
SECURE_SCRIPT_PATH="/usr/local/bin/secure-ssh-dirs.sh"
if ! sudo grep -qF "$SECURE_SCRIPT_PATH" "$RC_LOCAL"; then
    echo "Adding $SECURE_SCRIPT_PATH to $RC_LOCAL"
    sudo sed -i -e "s|^exit 0|# Secure SSH directories on boot\n$SECURE_SCRIPT_PATH || true\n\nexit 0|" "$RC_LOCAL"
else
    echo "$SECURE_SCRIPT_PATH already present in $RC_LOCAL"
fi

# --- Task 25: Initial Script Runs ---
echo "--- Starting Task 25: Initial Script Runs ---"

echo "Running initial key update..."
sudo /usr/local/bin/update_ssh_keys.sh

echo "Running initial SSH directory security scan..."
sudo /usr/local/bin/secure-ssh-dirs.sh

# --- Finalizing User Data ---
echo "User data script completed successfully at $(date)"
